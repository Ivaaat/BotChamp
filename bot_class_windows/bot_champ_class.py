import requests
from lxml import html
import telebot
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import time
import logging
from telebot import formatting
from news_football_class import news_parse, get_one_news, rss_news
from youtube_parse_class import parse_youtube_ref, you_pytube, bs4_youtube, youtube_video, rutube_video
from xpath_ref_class import *
from constants_class import mass_contry, mass_review, parse_site, dict_youtube, dict_site, list_name_site, dict_matchtv, rss_link
from championat_class import add_db, get_tab, get_logo, get_next_date, get_cal, get_start_end_tour, news_pic
from world_champ import WorldCup, world_playoff
import threading
from config import TOKEN, user_id, User_agent
from MyDataBase import MyBaseDB
from pymongo import MongoClient
import re
#from testd import json_championat
from user_mongo import add_user, view_users, get_push, get_user, get_list_user, set_push, add_field, delete_field, get_live
#from googletrans import Translator
from datetime import datetime, timedelta
from PIL import Image
from PIL import ImageFont
from PIL import ImageDraw 



client = MongoClient()
logger = telebot.logger
telebot.logger.setLevel(logging.DEBUG)
bot = telebot.TeleBot(TOKEN)#–¢–æ–∫–µ–Ω
bot.set_my_commands(
    commands=[
        telebot.types.BotCommand("start", "start_parse"),
    ],
)

bot.send_message(user_id,"–í—ã—à–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ. –ñ–º–∏ /start")
@bot.message_handler(regexp='send')
def userlist(message):
    user_list = get_list_user()
    for user_id in user_list:
        bot.send_message(user_id,"–í—ã—à–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ. –ñ–º–∏ /start")


sess = requests.Session()
sess.headers.update(User_agent)

#—Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –Ω–∞–∑–≤–∞–Ω–∏–µ —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤
def champ_keyboard():
    markup = types.ReplyKeyboardMarkup()
    back_button(markup)
    for key in mass_contry:
        button = types.KeyboardButton(key)
        markup.add(button)
    return markup

#—Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
def back_button(markup):
    button_back = types.KeyboardButton('–ù–∞–∑–∞–¥')
    return markup.add(button_back)

#—Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
def menu_button(markup):
    button_menu = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    return markup.add(button_menu)

# def live():
#     old_result = get_live()
#     new_result = {}
#     while True:
#         for id, list_live in old_result.items():
#             new_result[id] = json_championat('push', list_live)
#             for i, match_live in enumerate(list_live):

#                 if old_result[id][i] != match_live:
#                     bot.send_message(id, json_championat('push', match_live))
#threading.Thread(target=live).start()

def parse_for_push(url):
    response = sess.get(url)
    tree = html.fromstring(response.text)
    review_list_lxml_href = tree.xpath(review_xpath_href)
    review_list_lxml_title = tree.xpath(review_xpath_title)
    review_list_lxml_date= tree.xpath(review_xpath_date)
    asd = []
    if len(review_list_lxml_href) == 0:
            review_list_lxml_href = tree_ref.xpath(review_xpath_match_France_href)
    for i, url_ref in enumerate(review_list_lxml_href):
        response_ref = sess.get(url_ref)
        tree_ref = html.fromstring(response_ref.text)
        review_href_list = tree_ref.xpath(review_xpath_match_href)
        if len(review_href_list) == 0:
            review_href_list = tree_ref.xpath(review_xpath_match_France_href)
        review_ref = review_href_list[0][review_href_list[0].find('https'):len(review_href_list[0])]
        asd.append([(review_list_lxml_title[i].replace('–≤–∏–¥–µ–æ –æ–±–∑–æ—Ä –º–∞—Ç—á–∞'," | ") + review_list_lxml_date[i]), review_ref])
    return dict(asd)


def news():
    response = sess.get(rss_link)
    _, old_link, _ = rss_news(response)
    while True:
        try:
            timer = 120
            list_user_push_true = [user_id for user_id in get_list_user() if get_push(user_id)]
            if len(list_user_push_true) > 0:
                response = sess.get(rss_link)
                new_news, new_link, logo = rss_news(response)
                #if new_news != old_news:
                if new_link != old_link:
                    pic = news_pic(logo, new_news)
                    inst_view = f'https://t.me/iv?url=https%3A%2F%2F{new_link}&rhash=f610f320a497f8'
                    markup = InlineKeyboardMarkup()
                    markup.add(InlineKeyboardButton(new_news, url=inst_view))
                    old_link = new_link
                    for id in list_user_push_true:
                        bot.send_photo(id,pic,reply_markup = markup)
        except Exception as e:
            bot.send_message(user_id, str('def news\n'))
            time.sleep(timer)
        time.sleep(timer)
threading.Thread(target=news).start()

def video_matchtv():
    old_video_dict = rutube_video()
    while True:
        ### –¢—É—Ç –∫–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞
        timer = 1800
        list_user_push_true = [user_id for user_id in get_list_user() if get_push(user_id)]
        try:
            new_video_dict = rutube_video()
            for desc_video, ref in new_video_dict.items():
                if desc_video in old_video_dict:
                    break
                for id in list_user_push_true:
                    bot.send_message(user_id, str(f'–í—ã—à–µ–ª –æ–±–∑–æ—Ä\n'))
                    message = bot.send_message(id, f"{desc_video}\n{ref}")
                    if id < 0:
                        bot.pin_chat_message(id, message.message_id)
                old_video_dict[desc_video] = ref
        except Exception:
            bot.send_message(user_id, str(f'except video_matchtv\n'))
            time.sleep(timer)
        time.sleep(timer)


def video(name="", channel="", query = "highlights"):
    if channel.startswith("@"):
        old_video_dict = youtube_video(channel, query = query )
    elif name == "":
        old_video_dict = rutube_video()
    else:
        old_video_dict = parse_for_push(dict_site[name])
    while True:
        ### –¢—É—Ç –∫–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞
        timer = 1800
        list_user_push_true = [user_id for user_id in get_list_user() if get_push(user_id)]
        try:
            if channel.startswith("@"):
                new_video_dict = youtube_video(name, query = query )
            elif name == "":
                new_video_dict = rutube_video()
            else:
                new_video_dict = parse_for_push(dict_site[name])
            for desc_video, ref in new_video_dict.items():
                if desc_video in old_video_dict:
                    break
                for id in list_user_push_true:
                    bot.send_message(user_id, str(f'{name}\n–í—ã—à–µ–ª –æ–±–∑–æ—Ä\n'))
                    message = bot.send_message(id, f"{desc_video}\n{ref}")
                    if id < 0:
                        bot.pin_chat_message(id, message.message_id)
                old_video_dict[desc_video] = ref
        except Exception:
            bot.send_message(user_id, str(f'{name}\nexcept parse youtube\n'))
            time.sleep(timer)
        time.sleep(timer)


            
# for name in dict_youtube:
#     #threading.Thread(target=video, args=(name,)).start()
#     threading.Timer(1,video, [name]).start()
# for name in dict_site:
#     threading.Timer(1,video, [name]).start()
# for name in dict_matchtv:
#     threading.Timer(1,video, [name]).start()
# for name in mass_contry.values():
#      threading.Timer(1,video, [name]).start()


threading.Timer(1, video).start()
threading.Timer(1, video, ['spain',"@okkosport", '–ª–∞ –ª–∏–≥–∞.']).start()
threading.Timer(1, video, ['france',"@Ligue1official"]).start()
# threading.Timer(1, video, ['france']).start()
threading.Timer(1, video, ['england']).start()
#threading.Timer(1, video, ['germany']).start()
#threading.Timer(1, video, ['russiapl']).start()
#threading.Timer(1, video, ['spain']).start()

# def push_live():
#     while True:
#         list_user_push_true = [user_id for user_id in get_list_user() if get_push(user_id, name_field = "123")]
#         if len(list_user_push_true) == 0:
#             continue
#         get_user()
#         if get_push(user_id, name_field = message.text) is str:
#             add_field(message.chat.id, message.text, True)
#         else:
#             if get_push(message.chat.id, name_field = message.text):
#                 bool_push = False
#             else:
#                 bool_push = True
#             set_push(message.chat.id, bool_push)


#         push = json_championat("push", message.text)

# threading.Thread(target=push_live).start()

def user_verif(message):
    word_verif = "–°–ø–∞—Ä—Ç–∞–∫"
    if message.text != word_verif:
        msg = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω—É: https://t.me/vaneuser")
        return bot.register_next_step_handler(msg, user_verif)
    #base.create(f'{message.chat.first_name} {message.chat.username}', message.chat.id, unique_strings=True )
    add_user(f'{message.chat.first_name} {message.chat.username}', message.chat.id, push=False)
    #bot.send_message(user_id,base.open())
    bot.send_message(user_id,view_users())
    bot.send_message(user_id,"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} {} {}".format(message.chat.id, message.chat.first_name, message.chat.username))
    return button_country_news(message)


#–°–¢–ê–†–¢–£–ï–ú –û–¢–°–Æ–î–ê
@bot.message_handler(commands='start')
def button_country_news(message):
    #if str(message.chat.id) not in base.open():
    if not get_user(message.chat.id):
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω–æ–µ —Å–ª–æ–≤–æ")
        return bot.register_next_step_handler(msg, user_verif)
    markup = types.ReplyKeyboardMarkup()
    button_country = types.KeyboardButton('–ß–µ–º–ø–∏–æ–Ω–∞—Ç—ãüèÜ')
    button_news = types.KeyboardButton('–ù–æ–≤–æ—Å—Ç–∏üì∞')
    button_review = types.KeyboardButton('–û–±–∑–æ—Ä—ã‚öΩ')
    markup.add(button_country, button_news)
    markup.add(button_review)
    if get_push(message.chat.id):
        ne = '–Ω–µ'
    else:
        ne = ""
    msg = bot.send_message(message.chat.id, f'{message.chat.first_name}! aka {message.chat.username}\n\n\
                     ‚öΩ –¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç @{bot.user.username} ‚öΩ\n\n\
        –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ –æ —Ç–æ–ø —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞x!\n\n\
                –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–∞–Ω–¥?\n\
                ‚úÖ–ñ–º–∏ - –ß–µ–º–ø–∏–æ–Ω–∞—Ç—ãüèÜ\n\n\
                –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Ñ—É—Ç–±–æ–ª—å–Ω–æ–≥–æ –º–∏—Ä–∞?\n\
                ‚úÖ–ñ–º–∏ -  –ù–æ–≤–æ—Å—Ç–∏üì∞\n\n\
                –•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ–æ–±–∑–æ—Ä—ã —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π?\n\
                ‚úÖ–ñ–º–∏ -  –û–±–∑–æ—Ä—ã‚öΩ\n\n\n\
                ‚úÖ–ñ–º–∏ /push –∏ —Ç–µ–±–µ {ne} –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ—Å—Ç—è—Ö!\n\n\n‚úÖ–í—ã–±–∏—Ä–∞–π!', reply_markup= markup)
    bot.delete_my_commands()
    bot.set_my_commands(
    commands=[
        telebot.types.BotCommand("push", f"{ne} push notifications")
    ],
)
    bot.register_next_step_handler(msg, table_text)

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.callback_query_handler(func=lambda call: call.data == 'back')
def callback_query(call):
        bot.answer_callback_query(call.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.clear_step_handler_by_chat_id(chat_id = call.message.chat.id)
        button_country_news(call.message)

@bot.callback_query_handler(func=lambda call: call.data == '–ú–∞—Ç—á –¢–í')
def callback_query(call):
        bot.answer_callback_query(call.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.clear_step_handler_by_chat_id(chat_id = call.message.chat.id)
        button_country_news(call.message)

#–°–æ–∑–¥–∞–µ–º —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏ "–ß–µ–º–ø–∏–æ–Ω–∞—Ç—ãüèÜ" –∏ "–ù–æ–≤–æ—Å—Ç–∏üì∞  '–û–±–∑–æ—Ä—ã‚öΩ' –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ —Å—Ç–∞—Ä—Ç–∞"
def table_text(message, back = "" ):
    markup = types.ReplyKeyboardMarkup()
    if message.text == '/push':
        if get_push(message.chat.id) == False:
            set_push(message.chat.id, True)
            bot.send_message(message.chat.id,'–ñ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!')
        else:
            set_push(message.chat.id, False)
            bot.send_message(message.chat.id,'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –±—É–¥–µ—Ç!')
        button_country_news(message)
    elif '–ß–µ–º–ø–∏–æ–Ω–∞—Ç—ãüèÜ' in [message.text, back]:
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —á–µ–º–ø–∏–æ–Ω–∞—Ç', reply_markup=champ_keyboard())
        bot.register_next_step_handler(msg, calendar_and_table)
    elif '–ù–æ–≤–æ—Å—Ç–∏üì∞' in [message.text, back]:
        back_button(markup)
        dict_news = news_parse()
        for news in dict_news:
                    markup.add(types.KeyboardButton(news))
        bot.clear_step_handler_by_chat_id(chat_id = message.chat.id)
        msg = bot.send_message(message.chat.id,
                        '–ù–æ–≤–æ—Å—Ç–∏',
                        reply_markup = markup)
        bot.register_next_step_handler(msg, get_news, dict_news)
    elif '–û–±–∑–æ—Ä—ã‚öΩ' in [message.text, back]:
        back_button(markup)
        for key in mass_review:
            if message.chat.id != user_id and (key == '–ß–µ–º–ø–∏–æ–Ω–∞—Ç –ù–ù 22-23. –ì–æ—Ä–æ–¥—Å–∫–∞—è –ª–∏–≥–∞' or key.startswith('–ö—É–±–æ–∫')) :
                continue
            button_champ_rev = types.KeyboardButton(key)
            markup.add(button_champ_rev)
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —á–µ–º–ø–∏–æ–Ω–∞—Ç', reply_markup=markup)
        bot.register_next_step_handler(msg, get_dict_review)
    # elif 'Live' in [message.text, back]:
    #     markup = types.ReplyKeyboardMarkup()
    #     button_today = types.KeyboardButton('–°–µ–≥–æ–¥–Ω—è')
    #     button_live = types.KeyboardButton('Live')
    #     back_button(markup)
    #     markup.add(button_today, button_live)
    #     msg = bot.send_message(message.chat.id, '–ú–∞—Ç—á–∏', reply_markup=markup)
    #     bot.register_next_step_handler(msg, today_or_live)
    elif message.text == "update" and user_id == message.chat.id:
        for name in mass_contry.values():
            add_db(name, '2022/2023')
            bot.send_message(message.chat.id, f'–û–±–Ω–æ–≤–∏–ª {name}')
            time.sleep(5)
        bot.send_message(message.chat.id, '–û–±–Ω–æ–≤–∏–ª —Ç–∞–±–ª–∏—Ü—ã')
        bot.clear_step_handler_by_chat_id(chat_id = message.chat.id)
        button_country_news(message)
    else:
        bot.clear_step_handler_by_chat_id(chat_id = message.chat.id)
        button_country_news(message)

# def today_or_live(message, back = ""):
#     try:
#         markup = types.ReplyKeyboardMarkup()
#         menu_button(markup)
#         back_button(markup)
#         prop_match = json_championat(message.text)
#         if message.text == '–ù–∞–∑–∞–¥':
#             return button_country_news(message)
#         elif prop_match == "–ù–µ—Ç –º–∞—Ç—á–µ–π":
#             button_name = types.KeyboardButton(prop_match)
#             markup.add(button_name)
#         elif message.text in  ['Live', "–°–µ–≥–æ–¥–Ω—è"] or back in ['Live', "–°–µ–≥–æ–¥–Ω—è"]:
#             if message.text not in ['Live', "–°–µ–≥–æ–¥–Ω—è"]:
#                 text = back
#             text = message.text
#             prop_match = json_championat(text)
#             for name_match in prop_match:
#                 button_name = types.KeyboardButton(name_match)
#                 markup.add(button_name)
#         else:
#             raise KeyError
#         msg = bot.send_message(message.chat.id, message.text, reply_markup=markup)
#         bot.register_next_step_handler(msg, property_match)
#     except Exception:
#         table_text(message, back = 'Live')

# def property_match(message):
#     try:
#         if message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
#             button_country_news(message)
#         elif message.text == '–ù–∞–∑–∞–¥':
#             table_text(message, back = 'Live')
#         else:
#             push = json_championat("push", message.text)
#             if type(push) == bool:
#                 bot.send_message(message.chat.id, "–ú–∞—Ç—á –Ω–µ Live")
#                 return table_text(message, back = 'Live')
#             if get_push(message.chat.id, name_field = message.text) == "":
#                 add_field(message.chat.id, message.text, True)
#                 bot.send_message(message.chat.id, "–¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –º–∞—Ç—á\n" + message.text)
#             else:
#                 delete_field(message.chat.id, message.text)
#                 bot.send_message(message.chat.id, "–¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –º–∞—Ç—á–∞\n" + message.text)
                # if get_push(message.chat.id, name_field = message.text):
                #     bool_push = False
                # else:
                #     bool_push = True
                # set_push(message.chat.id, bool_push)

            #msg = bot.send_message(message.chat.id, "–ö–§", reply_markup= markup)
            #bot.register_next_step_handler(msg, table_text, 'Live')
    #         today_or_live(message, back = "Live")
    # except Exception:
    #     table_text(message, back = 'Live')


#–°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏ "–ö–∞–ª–µ–Ω–¥–∞—Ä—å" –∏ "–¢–∞–±–ª–∏—Ü–∞ "
def calendar_and_table(message, back = ""):
    try:
        bot.delete_message(message.chat.id, message.message_id)
        markup = types.ReplyKeyboardMarkup()
        button_calendar = types.KeyboardButton('–ö–∞–ª–µ–Ω–¥–∞—Ä—åüóì')
        button_table = types.KeyboardButton('–¢–∞–±–ª–∏—Ü–∞‚öΩ')
        back_button(markup)
        markup.add(button_calendar, button_table)
        if back in mass_contry:
            msg = bot.send_message(message.chat.id, back, reply_markup=markup)
            bot.register_next_step_handler(msg, get_def, back)
        elif message.text in mass_contry:
            msg = bot.send_message(message.chat.id, message.text, reply_markup=markup)
            bot.register_next_step_handler(msg, get_def, message.text)
        elif message.text == '–ù–∞–∑–∞–¥':
            button_country_news(message)
        else:
            raise KeyError
    except Exception:
        table_text(message, back='–ß–µ–º–ø–∏–æ–Ω–∞—Ç—ãüèÜ')



#–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –æ–±–æ–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤—ã—à–µ
def get_def(message, text):
    try:
        if message.text == '–ö–∞–ª–µ–Ω–¥–∞—Ä—åüóì':
            create_calendar(message, text)
        elif message.text == '–¢–∞–±–ª–∏—Ü–∞‚öΩ':
            create_table(message, text)
        elif message.text == '–ù–∞–∑–∞–¥':
            table_text(message, back='–ß–µ–º–ø–∏–æ–Ω–∞—Ç—ãüèÜ')
        else:
             raise KeyError
    except Exception:
        msg = bot.send_message(message.chat.id, f'{message.chat.first_name}!‚úÖ–í—ã–±–µ—Ä–∏!\n\n\
                                  üîô–ù–∞–∑–∞–¥\n\n\
            üóì–ö–∞–ª–µ–Ω–¥–∞—Ä—å          üìä–¢–∞–±–ª–∏—Ü–∞\
            ')
        bot.register_next_step_handler(msg, get_def, text)


#–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
def create_table(message, country_button):
    #–°–æ–∑–¥–∞—é –º–∞—Å—Å–∏–≤ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞
    if country_button == '–ß–µ–º–ø–∏–æ–Ω–∞—Ç –º–∏—Ä–∞üåç':
        bot.send_message(message.chat.id, f'{country_button}. –ü–ª–µ–π-–æ—Ñ—Ñ! \n\n{world_playoff()}')
        return calendar_and_table(message, back = country_button)
    else:
        mass = get_tab(mass_contry[country_button])
        markup = types.ReplyKeyboardMarkup()
        menu_button(markup)
        back_button(markup)
        i = 1
        for key, value in mass.items():
            button = types.KeyboardButton(f'{str(i)}.  {key}' +
            '   –û—á–∫–∏: ' + str(value['–û—á–∫–∏']) +
            '   –ò–≥—Ä—ã: ' + str(value['–ò–≥—Ä—ã'])
            )
            markup.add(button)
            i+=1
        msg = bot.send_message(message.chat.id,
        f'{country_button}.–¢–∞–±–ª–∏—Ü–∞ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞!\n\
    –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
                                        reply_markup=markup
        )
        bot.register_next_step_handler(msg, result_team, mass, country_button)


#–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã
def result_team(message, dict_team, country_button):
    try:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back"))
        text = message.text[4:message.text.find('–û', 5)].strip()
        if text in dict_team:
            bot.delete_message(message.chat.id, message.message_id)
            msg = bot.send_photo(message.chat.id,
                get_logo(mass_contry[country_button], text),
                caption = formatting.mbold('\n\n'.join(dict_team[text]['–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n'])),
                parse_mode='MarkdownV2',
                reply_markup = markup
                )
            bot.register_next_step_handler(msg, result_team, dict_team, country_button)
        elif message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            button_country_news(message)
        elif message.text == '–ù–∞–∑–∞–¥':
            calendar_and_table(message, back = country_button)
        else:
            raise KeyError("–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É:")
    except Exception as e:
        msg = bot.send_message(message.chat.id, e)
        bot.register_next_step_handler(msg, result_team, dict_team, country_button)

#–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
def create_calendar(message, country_button):
    if country_button == "–ß–µ–º–ø–∏–æ–Ω–∞—Ç –º–∏—Ä–∞üåç":
        worldcup = WorldCup(mass_contry[country_button])
        bot.send_message(message.chat.id, worldcup.worldcup_calendar())
        return calendar_and_table(message, back = country_button)
    elif country_button in mass_contry:
        country = mass_contry.get(country_button)
        dict_calendar = get_cal(country,'2022/2023')
        markup = types.ReplyKeyboardMarkup()
        menu_button(markup)
        back_button(markup)
        for key in dict_calendar:
            start = str(dict_calendar[key]['start'])
            end = str(dict_calendar[key]['end'])
            the_end =""
            if dict_calendar[key]['–ó–∞–∫–æ–Ω—á–µ–Ω']:
                the_end = '| –ó–∞–∫–æ–Ω—á–µ–Ω'
            button = types.KeyboardButton(('{} | {} - {} {}').format(key, start[:10], end[:10], the_end))
            markup.add(button)
        msg = bot.send_message(message.chat.id,
                            f'{country_button} –í—ã–±–µ—Ä–∏ —Ç—É—Ä, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:',
                            reply_markup=markup
                            )
        bot.register_next_step_handler(msg, view_tour, dict_calendar, country_button)
    else:
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —á–µ–º–ø–∏–æ–Ω–∞—Ç:[eq')
        bot.register_next_step_handler(msg, create_calendar)

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Ç—É—Ä–æ–º
def view_tour (message, dict_calendar, country_button):
    try:
        text = message.text[:6].strip()
        if text in dict_calendar:
            start = str(dict_calendar[text]['start'])
            end = str(dict_calendar[text]['end'])
            bot.delete_message(message.chat.id, message.message_id)
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back"))
            #markup.add(InlineKeyboardButton("–ú–∞—Ç—á –¢–í", url = 'https://www.youtube.com/@MatchTV/videos'))
            asd = f'{text} | {start} - {end} | \n\n' + '\n\n'.join(dict_calendar[text]['–ú–∞—Ç—á–∏'])
            msg = bot.send_message(message.chat.id,
                            formatting.format_text(formatting.mbold(asd)),
                            parse_mode = 'MarkdownV2',
                            reply_markup = markup)
            bot.register_next_step_handler(msg, view_tour, dict_calendar, country_button)
        elif message.text == '–ù–∞–∑–∞–¥':
            bot.clear_step_handler_by_chat_id(chat_id = message.chat.id)
            calendar_and_table(message, back = country_button)
        elif message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            bot.clear_step_handler_by_chat_id(chat_id = message.chat.id)
            button_country_news(message)
        else:
            raise KeyError
    except Exception:
        msg = bot.send_message(message.chat.id, f'–î–æ—Ä–æ–≥–æ–π, {message.chat.first_name}. ‚úÖ–í—ã–±–µ—Ä–∏ —Ç—É—Ä!\n\n\
    ‚úÖ–ò–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —á–µ–º–ø–∏–æ–Ω–∞—Ç\n\
    ‚úÖ–ò–ª–∏ –Ω–∞–∂–º–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n ')
        bot.register_next_step_handler(msg, view_tour, dict_calendar, country_button)

#–ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞
def get_news(message, ref_dict):
    try:
        if message.text in ref_dict :
            axzc = ref_dict.get(message.text)
            list_photo_text = get_one_news(axzc, message.text[5:])
            #pic = news_pic(list_photo_text[0], message.text)
            if len(list_photo_text[1]) >= 1024:
                num_symb =list_photo_text[1][:1024].rfind('.') + 1
                bot.send_photo(message.chat.id,
                    #pic,
                    list_photo_text[0],
                    caption=list_photo_text[1][:num_symb])
                for x in range(num_symb, len(list_photo_text[1]), 1024):
                    msg = bot.send_message(message.chat.id, list_photo_text[1][x:x+1024])
            else:
                msg = bot.send_photo(message.chat.id,
                    list_photo_text[0],#pic,#list_photo_text[0],
                    caption=list_photo_text[1],
                )
            bot.register_next_step_handler(msg, get_news,ref_dict)
        elif message.text == '–ù–∞–∑–∞–¥':
            bot.clear_step_handler_by_chat_id(chat_id = message.chat.id)
            button_country_news(message)
        else:
            raise KeyError
    except Exception:
         table_text(message, back = '–ù–æ–≤–æ—Å—Ç–∏üì∞')


#–ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—Ä–∑–æ—Ä –∏–∑ api youtube
def get_dict_review(message, back = ""):
    dict_review = {}
    markup = types.ReplyKeyboardMarkup()
    menu_button(markup)
    back_button(markup)
    try:
        #if '–ê–Ω–≥–ª–∏—èüè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø' in [message.text, back] or '–§—Ä–∞–Ω—Ü–∏—èüá´üá∑' in [message.text, back] or:
        if message.text in list_name_site or back in list_name_site:
            url = f'{mass_review[message.text]}'
            response = sess.get(url)
            tree = html.fromstring(response.text)
            review_list_lxml_href = tree.xpath(review_xpath_href)
            review_list_lxml_title = tree.xpath(review_xpath_title)
            review_list_lxml_date= tree.xpath(review_xpath_date)
            for i in range(len(review_list_lxml_href)):
                review_title = review_list_lxml_title[i].replace('–≤–∏–¥–µ–æ –æ–±–∑–æ—Ä –º–∞—Ç—á–∞'," ")
                dict_review[review_title + review_list_lxml_date[i]] = review_list_lxml_href[i]
                button_champ_rev = types.KeyboardButton(review_title + review_list_lxml_date[i])
                markup.add(button_champ_rev)
            msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –æ–±–∑–æ—Ä', reply_markup=markup)
            return bot.register_next_step_handler(msg, get_ref_review, dict_review, message.text)
        elif message.text in mass_review or back in mass_review:
            #dict_review = parse_youtube_ref(mass_review[message.text])
            #dict_review = you_pytube(mass_review[message.text])
            dict_review = bs4_youtube(mass_review[message.text])
            for key in dict_review:
                button_champ_rev = types.KeyboardButton(key)
                markup.add(button_champ_rev)
            msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –æ–±–∑–æ—Ä', reply_markup=markup)
            bot.register_next_step_handler(msg, get_ref_review, dict_review, message.text)
        elif message.text == '–ù–∞–∑–∞–¥':
            button_country_news(message)
        else:
            raise KeyError
    except Exception:
        table_text(message, back = '–û–±–∑–æ—Ä—ã‚öΩ')


def get_ref_review(message, dict_review, text):
    try:
        if message.text in dict_review and text in list_name_site:
            url = f'{dict_review[message.text]}'
            response = sess.get(url)
            tree = html.fromstring(response.text)
            review_list_lxml_href = tree.xpath(review_xpath_match_href)
            if len(review_list_lxml_href) == 0:
                review_list_lxml_href = tree.xpath(review_xpath_match_France_href)
            review_ref = review_list_lxml_href[0][review_list_lxml_href[0].find('https'):len(review_list_lxml_href[0])]
            msg = bot.send_message(message.chat.id, f"{message.text}\n{review_ref}")
            return bot.register_next_step_handler(msg, get_ref_review,dict_review,text)
        elif message.text in dict_review and text in mass_review:
            msg = bot.send_message(message.chat.id, dict_review[message.text])
            return bot.register_next_step_handler(msg, get_ref_review, dict_review, text)
        elif message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            button_country_news(message)
        elif message.text == '–ù–∞–∑–∞–¥':
            table_text(message, back = '–û–±–∑–æ—Ä—ã‚öΩ')
        else:
            raise KeyError
    except Exception:
        table_text(message, back = '–û–±–∑–æ—Ä—ã‚öΩ')

if __name__ == '__main__':
    while True:
        try:#–¥–æ–±–∞–≤–ª—è–µ–º try –¥–ª—è –±–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            #bot.polling(none_stop=True)#–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
            bot.infinity_polling()
        except:
            time.sleep(10)#–≤ —Å–ª—É—á–∞–µ –ø–∞–¥–µ–Ω–∏—è