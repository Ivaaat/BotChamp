import telebot
from telebot import types, formatting
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import time
import logging
from datetime import datetime
from config import mass_contry
from config import list_name_site, db
from championat import add_db, get_tab, get_logo, get_cal, parent_word
from world_champ import WorldCup, world_playoff
from config import TOKEN, user_id, channel_link
from config import channel_id
from user_mongo import add_user, view_users, get_push
from user_mongo import set_push, get_user, get_list_user
import news_football 
import youtube_parse 
from live import tomorrow
import flask
import socket

WEBHOOK_HOST = socket.gethostbyname(socket.gethostname())
WEBHOOK_PORT = 8443  # 443, 80, 88 or 8443 (port need to be 'open')
WEBHOOK_LISTEN = '0.0.0.0'

WEBHOOK_SSL_CERT = './webhook_cert.pem'  # Path to the ssl certificate
WEBHOOK_SSL_PRIV = './webhook_pkey.pem'

WEBHOOK_URL_BASE = "https://%s:%s" % (WEBHOOK_HOST, WEBHOOK_PORT)
WEBHOOK_URL_PATH = "/%s/" % (TOKEN)

app = flask.Flask(__name__)


# Empty webserver index, return nothing, just http 200
@app.route('/', methods=['GET', 'HEAD'])
def index():
    return ''


# Process webhook calls
@app.route(WEBHOOK_URL_PATH, methods=['POST'])
def webhook():
    if flask.request.headers.get('content-type') == 'application/json':
        json_string = flask.request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    else:
        flask.abort(403)

logger = telebot.logger
telebot.logger.setLevel(logging.INFO)
bot = telebot.TeleBot(TOKEN,skip_pending=True)  # –¢–æ–∫–µ–Ω
bot.set_my_commands(
    commands=[
        telebot.types.BotCommand("start", "start_parse"),
    ],
)


# —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –Ω–∞–∑–≤–∞–Ω–∏–µ —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤
def champ_keyboard():
    markup = types.ReplyKeyboardMarkup()
    back_button(markup)
    for key in mass_contry:
        button = types.KeyboardButton(key)
        markup.add(button)
    return markup


# —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
def back_button(markup):
    button_back = types.KeyboardButton('–ù–∞–∑–∞–¥')
    return markup.add(button_back)


# —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
def menu_button(markup):
    button_menu = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    return markup.add(button_menu)


def user_verif(message):
#     text = f"–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –ø–æ–¥–ø–∏—à–∏—Å—å \
# –Ω–∞ –∫–∞–Ω–∞–ª:\n {channel_link} –∏ –Ω–∞–∂–º–∏ /start"
#     try:
#         member = bot.get_chat_member(channel_id, message.chat.id)
#         if member.status == 'left':
#             bot.send_message(message.chat.id, text)
#             return False
#     except telebot.apihelper.ApiTelegramException:
#         bot.send_message(message.chat.id, text)
#         return False
    if not get_user(message.chat.id):
        add_user(f'{message.chat.first_name} {message.chat.username}',
                 message.chat.id, push=False)
        bot.send_message(user_id,
                         "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} {} {}".format(
                                                    message.chat.id,
                                                    message.chat.first_name,
                                                    message.chat.username))
    return True


# –°–¢–ê–†–¢–£–ï–ú –û–¢–°–Æ–î–ê
#@bot.message_handler(content_types='text')
@bot.message_handler(func=lambda message: True, content_types=['text'])
def button_country_news(message):
    if not user_verif(message):
        return
    markup = types.ReplyKeyboardMarkup()
    button_country = types.KeyboardButton('–ß–µ–º–ø–∏–æ–Ω–∞—Ç—ãüèÜ')
    button_news = types.KeyboardButton('–ù–æ–≤–æ—Å—Ç–∏üì∞')
    button_review = types.KeyboardButton('–û–±–∑–æ—Ä—ã‚öΩ')
    button_live = types.KeyboardButton('–ë–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏')
    markup.add(button_country, button_news)
    markup.add(button_review, button_live)
    if get_push(message.chat.id):
        ne = '–Ω–µ'
    else:
        ne = ""
    msg = bot.send_message(message.chat.id,
                           f'{message.chat.first_name}! aka \
{message.chat.username}\n\n\
                     ‚öΩ –¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç @{bot.user.username} ‚öΩ\n\n\
        –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ –æ —Ç–æ–ø —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞x!\n\n\
                –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–∞–Ω–¥?\n\
                ‚úÖ–ñ–º–∏ - –ß–µ–º–ø–∏–æ–Ω–∞—Ç—ãüèÜ\n\n\
                –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Ñ—É—Ç–±–æ–ª—å–Ω–æ–≥–æ –º–∏—Ä–∞?\n\
                ‚úÖ–ñ–º–∏ -  –ù–æ–≤–æ—Å—Ç–∏üì∞\n\n\
                –•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ–æ–±–∑–æ—Ä—ã —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π?\n\
                ‚úÖ–ñ–º–∏ -  –û–±–∑–æ—Ä—ã‚öΩ\n\n\n\
                ‚úÖ–ñ–º–∏ /push –∏ —Ç–µ–±–µ {ne} –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ—Å—Ç—è—Ö!\
\n\n\n‚úÖ–í—ã–±–∏—Ä–∞–π!',
                           reply_markup=markup)

    bot.delete_my_commands()
    bot.set_my_commands(commands=[
        telebot.types.BotCommand("push", f"{ne} push notifications")])
    bot.register_next_step_handler(msg, table_text)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.callback_query_handler(func=lambda call: call.data == 'back')
def callback_query(call):
    bot.answer_callback_query(call.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
    button_country_news(call.message)


# –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏ "–ß–µ–º–ø–∏–æ–Ω–∞—Ç—ãüèÜ" –∏ "–ù–æ–≤–æ—Å—Ç–∏üì∞  '–û–±–∑–æ—Ä—ã‚öΩ' –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ —Å—Ç–∞—Ä—Ç–∞"
def table_text(message, back=""):
    markup = types.ReplyKeyboardMarkup()
    if message.text == '/push':
        if get_push(message.chat.id) is False:
            set_push(message.chat.id, True)
            bot.send_message(message.chat.id, '–ñ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!')
        else:
            set_push(message.chat.id, False)
            bot.send_message(message.chat.id, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –±—É–¥–µ—Ç!')
        button_country_news(message)
    elif '–ß–µ–º–ø–∏–æ–Ω–∞—Ç—ãüèÜ' in [message.text, back]:
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —á–µ–º–ø–∏–æ–Ω–∞—Ç',
                               reply_markup=champ_keyboard())
        bot.register_next_step_handler(msg, calendar_and_table)
    elif '–ù–æ–≤–æ—Å—Ç–∏üì∞' in [message.text, back]:
        back_button(markup)
        news_coll = db['news']
        dict_news = {}
        for news in news_coll.find().limit(50).sort('date',-1):
            date = news['date'].strftime("%H:%M")
            title = '{} {}'.format(date, news['title']) 
            markup.add(types.KeyboardButton(title))
            dict_news[title] = [news['logo'], news['text']]
        bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
        msg = bot.send_message(message.chat.id,
                               '–ù–æ–≤–æ—Å—Ç–∏', reply_markup=markup)
        bot.register_next_step_handler(msg, get_news, dict_news)
    elif '–û–±–∑–æ—Ä—ã‚öΩ' in [message.text, back]:
        back_button(markup)
        for key in list_name_site:
            if message.chat.id != user_id and (
                                key == '–ß–µ–º–ø–∏–æ–Ω–∞—Ç –ù–ù 22-23. \
                                –ì–æ—Ä–æ–¥—Å–∫–∞—è –ª–∏–≥–∞' or key.startswith('–ö—É–±–æ–∫')):
                continue
            button_champ_rev = types.KeyboardButton(key)
            markup.add(button_champ_rev)
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —á–µ–º–ø–∏–æ–Ω–∞—Ç',
                               reply_markup=markup)
        bot.register_next_step_handler(msg, get_dict_review)
    elif message.text == "update" and user_id == message.chat.id:
        for name in mass_contry.values():
            add_db(name, '2022/2023')
            bot.send_message(message.chat.id, f'–û–±–Ω–æ–≤–∏–ª {name}')
            time.sleep(5)
        bot.send_message(message.chat.id, '–û–±–Ω–æ–≤–∏–ª —Ç–∞–±–ª–∏—Ü—ã')
        bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
        button_country_news(message)
    elif '–ë–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏' in [message.text, back]:
        back_button(markup)
        #markup.add(types.KeyboardButton('Live'))
        buttons = ['Live','–í—á–µ—Ä–∞', '–°–µ–≥–æ–¥–Ω—è', '–ó–∞–≤—Ç—Ä–∞']
        markup.add(buttons[0])
        markup.add(*[x for x in buttons[1:]])
        msg = bot.send_message(message.chat.id, '–ú–∞—Ç—á–∏',
                               reply_markup=markup)
        bot.register_next_step_handler(msg, button_days, buttons)
    elif message.text == 'users' and user_id == message.chat.id:
        bot.send_message(user_id, view_users())
    elif message.text == 'send' and user_id == message.chat.id:
        user_list = get_list_user()
        for id in user_list:
            bot.send_message(id, "–í—ã—à–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ. –ñ–º–∏ /start")
    else:
        bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
        button_country_news(message)


def button_days(message, buttons):
    #bot.delete_message(message.chat.id,message_id= message.message_id)
    if message.text in buttons:
        markup = types.ReplyKeyboardMarkup()
        back_button(markup)
        matches = tomorrow(message.text)
        if matches is None:
            msg = bot.send_message(message.chat.id, '–ù–µ—Ç –º–∞—Ç—á–µ–π')
            return bot.register_next_step_handler(msg, button_days, buttons)
        for match in matches:
            markup.add(types.KeyboardButton(match))
        msg = bot.send_message(message.chat.id, message.text,
                                reply_markup=markup)
        bot.register_next_step_handler(msg, match_res)
    else:
        bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
        button_country_news(message)
    

def match_res(message):
    table_text(message,back='–ë–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏')


# –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏ "–ö–∞–ª–µ–Ω–¥–∞—Ä—å" –∏ "–¢–∞–±–ª–∏—Ü–∞ "
def calendar_and_table(message, back=""):
    try:
        bot.delete_message(message.chat.id, message.message_id)
        markup = types.ReplyKeyboardMarkup()
        button_calendar = types.KeyboardButton('–ö–∞–ª–µ–Ω–¥–∞—Ä—åüóì')
        button_table = types.KeyboardButton('–¢–∞–±–ª–∏—Ü–∞‚öΩ')
        back_button(markup)
        markup.add(button_calendar, button_table)
        if back in mass_contry:
            msg = bot.send_message(message.chat.id, back, reply_markup=markup)
            bot.register_next_step_handler(msg, get_def, back)
        elif message.text in mass_contry:
            msg = bot.send_message(message.chat.id, message.text,
                                   reply_markup=markup)
            bot.register_next_step_handler(msg, get_def, message.text)
        elif message.text == '–ù–∞–∑–∞–¥':
            button_country_news(message)
        else:
            raise KeyError
    except Exception:
        table_text(message, back='–ß–µ–º–ø–∏–æ–Ω–∞—Ç—ãüèÜ')


# –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –æ–±–æ–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤—ã—à–µ
def get_def(message, text):
    try:
        if message.text == '–ö–∞–ª–µ–Ω–¥–∞—Ä—åüóì':
            create_calendar(message, text)
        elif message.text == '–¢–∞–±–ª–∏—Ü–∞‚öΩ':
            create_table(message, text)
        elif message.text == '–ù–∞–∑–∞–¥':
            table_text(message, back='–ß–µ–º–ø–∏–æ–Ω–∞—Ç—ãüèÜ')
        else:
            raise KeyError
    except Exception:
        msg = bot.send_message(message.chat.id,
                               f'{message.chat.first_name}!‚úÖ–í—ã–±–µ—Ä–∏!\n\n\
                                  üîô–ù–∞–∑–∞–¥\n\n\
            üóì–ö–∞–ª–µ–Ω–¥–∞—Ä—å          üìä–¢–∞–±–ª–∏—Ü–∞\
            ')
        bot.register_next_step_handler(msg, get_def, text)


# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
def create_table(message, country_button):
    # –°–æ–∑–¥–∞—é –º–∞—Å—Å–∏–≤ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞
    if country_button == '–ß–µ–º–ø–∏–æ–Ω–∞—Ç –º–∏—Ä–∞üåç':
        bot.send_message(message.chat.id,
                         f'{country_button}. –ü–ª–µ–π-–æ—Ñ—Ñ! \n\n{world_playoff()}')
        return calendar_and_table(message, back=country_button)
    else:
        mass = get_tab(mass_contry[country_button])
        markup = types.ReplyKeyboardMarkup()
        menu_button(markup)
        back_button(markup)
        j = 1
        for name_team, stat in mass.items():
            button = types.KeyboardButton(
                                    "{}. | {} |  –ò: {}  –û: {}  M: {}".format(
                                        j,
                                        name_team,
                                        stat[0],
                                        stat[1],
                                        stat[2]
                                        )
                                    )
            markup.add(button)
            j += 1
        msg = bot.send_message(message.chat.id,
                               f'{country_button}.–¢–∞–±–ª–∏—Ü–∞ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞!\n\
    –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
                               reply_markup=markup
                               )
        bot.register_next_step_handler(msg, result_team, mass, country_button)


# –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã
def result_team(message, dict_team, country_button):
    try:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back"))
        try:
            text = message.text.split("|")[1].strip()
        except IndexError:
            text = message.text
        if text in dict_team:
            list_date = []
            for date in dict_team[text][3]:
                true_date = datetime.strptime(date.split("|")[0].split()[0],
                                      '%d-%m-%Y').strftime('%d %B')
                list_date.append(
                    formatting.mbold('{} {} | {} | {}\
                                     '.format(true_date,
                                              date.split("|")[0],
                                              date.split('|')[1],
                                              date.split('|')[2]),escape=True))
            bot.delete_message(message.chat.id, message.message_id)
            msg = bot.send_photo(message.chat.id,
                                 get_logo(mass_contry[country_button], text),
                                 caption='\n\n'.join(list_date),
                                 reply_markup=markup,
                                 parse_mode="MarkdownV2"
                                 )
            bot.register_next_step_handler(msg, result_team, dict_team,
                                           country_button)
        elif message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            button_country_news(message)
        elif message.text == '–ù–∞–∑–∞–¥':
            calendar_and_table(message, back=country_button)
        else:
            raise KeyError
    except Exception:
        msg = bot.send_message(message.chat.id,
                               f'–î–æ—Ä–æ–≥–æ–π, {message.chat.first_name}. \
‚úÖ–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É!\n\n\
    ‚úÖ–ò–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —á–µ–º–ø–∏–æ–Ω–∞—Ç\n\
    ‚úÖ–ò–ª–∏ –Ω–∞–∂–º–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
        bot.register_next_step_handler(msg, result_team, dict_team,
                                       country_button)


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
def create_calendar(message, country_button):
    if country_button == "–ß–µ–º–ø–∏–æ–Ω–∞—Ç –º–∏—Ä–∞üåç":
        worldcup = WorldCup(mass_contry[country_button])
        bot.send_message(message.chat.id, worldcup.worldcup_calendar())
        return calendar_and_table(message, back=country_button)
    elif country_button in mass_contry:
        dict_calendar = get_cal(mass_contry[country_button], '2022/2023')
        markup = types.ReplyKeyboardMarkup()
        menu_button(markup)
        back_button(markup)
        for key in dict_calendar:
            start = datetime.strptime(
                str(dict_calendar[key]['start']).split()[0],
                '%Y-%m-%d').strftime('%d %B')
            #print(date_start + '\n')
            #start = parent_word(date_start)
            #print(start)
            end = datetime.strptime(
                str(dict_calendar[key]['end']).split()[0],
                '%Y-%m-%d').strftime('%d %B')
            #end = parent_word(date_end)
            the_end = ""
            if dict_calendar[key]['–ó–∞–∫–æ–Ω—á–µ–Ω']:
                the_end = '–ó–∞–∫–æ–Ω—á–µ–Ω'
            button = types.KeyboardButton(('{} | {} - {} | {}').format(
                key, start, end, the_end))
            markup.add(button)
        msg = bot.send_message(message.chat.id,
                               f'{country_button} –í—ã–±–µ—Ä–∏ —Ç—É—Ä, \
—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:',
                               reply_markup=markup
                               )
        bot.register_next_step_handler(msg, view_tour, dict_calendar,
                                       country_button)
    else:
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —á–µ–º–ø–∏–æ–Ω–∞—Ç:[eq')
        bot.register_next_step_handler(msg, create_calendar)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Ç—É—Ä–æ–º
def view_tour(message, dict_calendar, country_button):
    try:
        text = message.text.split("|")[0].strip()
        if text in dict_calendar:
            bot.delete_message(message.chat.id, message.message_id)
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                            callback_data="back"))
            list_date = []
            for date in dict_calendar[text]['–ú–∞—Ç—á–∏']:
                true_date = formatting.mitalic(
                    datetime.strptime(date.split("|")[0].split()[0],
                                      '%d-%m-%Y').strftime('%d %B'),escape=True)
                if true_date not in list_date:
                    list_date.append(true_date)
                list_date.append(formatting.mbold('{} | {} | {}'.format(
                    date.split("|")[0].split()[1],
                    date.split('|')[1],
                    date.split('|')[2]),escape=True))
            text = formatting.mbold(message.text, escape=True)
            msg = bot.send_message(message.chat.id,
                                   f"{text}\n\n" +
                                   '\n\n'.join(list_date),
                                   reply_markup=markup,
                                   parse_mode='MarkdownV2')
            bot.register_next_step_handler(msg, view_tour, dict_calendar,
                                           country_button)
        elif message.text == '–ù–∞–∑–∞–¥':
            bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
            calendar_and_table(message, back=country_button)
        elif message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
            button_country_news(message)
        else:
            raise KeyError
    except Exception:
        msg = bot.send_message(message.chat.id,
                               f'–î–æ—Ä–æ–≥–æ–π, {message.chat.first_name}. \
‚úÖ–í—ã–±–µ—Ä–∏ —Ç—É—Ä!\n\n\
    ‚úÖ–ò–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —á–µ–º–ø–∏–æ–Ω–∞—Ç\n\
    ‚úÖ–ò–ª–∏ –Ω–∞–∂–º–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n ')
        bot.register_next_step_handler(msg, view_tour, dict_calendar,
                                       country_button)


# –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞
def get_news(message, ref_dict):
    try:
        if message.text in ref_dict:
            logo = ref_dict[message.text][0]
            text = ref_dict[message.text][1]
            if len(text) >= 1024:
                num_symb = text[:1024].rfind('.') + 1
                bot.send_photo(message.chat.id,
                               logo,
                               caption=text[:num_symb])
                for x in range(num_symb, len(text), 1024):
                    msg = bot.send_message(message.chat.id,
                                           text[x:x+1024])
            else:
                msg = bot.send_photo(message.chat.id,
                                     logo,
                                     caption=text,
                                     )
            bot.register_next_step_handler(msg, get_news, ref_dict)
        elif message.text == '–ù–∞–∑–∞–¥':
            bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
            button_country_news(message)
        else:
            raise KeyError
    except Exception:
        table_text(message, back='–ù–æ–≤–æ—Å—Ç–∏üì∞')


# –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—Ä–∑–æ—Ä –∏–∑ api youtube
def get_dict_review(message, back=""):
    dict_review = {}
    markup = types.ReplyKeyboardMarkup()
    menu_button(markup)
    back_button(markup)
    video_coll = db['video']
    if message.text == list_name_site[0]:
        query = None
    else:
        query = {'country': message.text}
    try:
        if message.text in list_name_site or back in list_name_site:
            for key in video_coll.find(query).sort('_id',-1).limit(50):
                button_champ_rev = types.KeyboardButton(key["desc"])
                dict_review[key["desc"]] = key["link"]
                markup.add(button_champ_rev)
            msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –æ–±–∑–æ—Ä',
                                   reply_markup=markup)
            bot.register_next_step_handler(msg, get_ref_review,
                                           dict_review, message.text)
        elif message.text == '–ù–∞–∑–∞–¥':
            button_country_news(message)
        else:
            raise KeyError
    except Exception:
        table_text(message, back='–û–±–∑–æ—Ä—ã‚öΩ')


def get_ref_review(message, dict_review, text):
    try:
        if message.text in dict_review:
            msg = bot.send_message(message.chat.id,
                                   f"{message.text}\n\
{dict_review[message.text]}")
            return bot.register_next_step_handler(msg, get_ref_review,
                                                  dict_review, text)
        elif message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            button_country_news(message)
        elif message.text == '–ù–∞–∑–∞–¥':
            table_text(message, back='–û–±–∑–æ—Ä—ã‚öΩ')
        else:
            raise KeyError
    except Exception:
        table_text(message, back='–û–±–∑–æ—Ä—ã‚öΩ')


# if __name__ == '__main__':
   # while True:
   #     try:
   #         bot.infinity_polling()
   #     except Exception:
   #         time.sleep(10)


bot.remove_webhook()

time.sleep(0.1)

bot.set_webhook(url=WEBHOOK_URL_BASE + WEBHOOK_URL_PATH ,
                certificate=open(WEBHOOK_SSL_CERT, 'r'))

# Start flask server
app.run(host=WEBHOOK_LISTEN,
        port=WEBHOOK_PORT,
        ssl_context=(WEBHOOK_SSL_CERT, WEBHOOK_SSL_PRIV),
        debug=True)
